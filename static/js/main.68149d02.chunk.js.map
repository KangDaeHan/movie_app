{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","title","react_default","a","createElement","src","alt","MovieRate","_ref3","rate","MovieDesc","_ref4","overview","Movie","_ref","className","App","state","_renderMovies","_this","movies","map","movie","index","console","log","src_Movie","poster_path","vote_average","key","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","potato","json","results","catch","err","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTAgBA,SAASA,EAATC,GAAuC,IAAhBC,EAAgBD,EAAhBC,OAAQC,EAAQF,EAARE,MAE9B,OACCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQM,IAAKL,EAAOA,MAAOA,KAKxC,SAASM,EAATC,GAA6B,IAARC,EAAQD,EAARC,KAEpB,OACCP,EAAAC,EAAAC,cAAA,SAAIK,GAIN,SAASC,EAATC,GAAiC,IAAZC,EAAYD,EAAZC,SAEpB,OACCV,EAAAC,EAAAC,cAAA,SAAIQ,GAwBSC,MAvDf,SAAAC,GAAiD,IAAhCb,EAAgCa,EAAhCb,MAAOD,EAAyBc,EAAzBd,OAAQS,EAAiBK,EAAjBL,KAAMG,EAAWE,EAAXF,SACrC,OACCV,EAAAC,EAAAC,cAAA,OAAKW,UAAU,SACdb,EAAAC,EAAAC,cAAA,UAAKH,GACLC,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,MAAOA,IACpCC,EAAAC,EAAAC,cAACG,EAAD,CAAWE,KAAMA,IACjBP,EAAAC,EAAAC,cAACM,EAAD,CAAWE,SAAUA,MCmETI,6MAvEdC,MAAQ,KAgCRC,cAAgB,WAWf,OAVeC,EAAKF,MAAMG,OAAOC,IAAI,SAACC,EAAOC,GAE5C,OADAC,QAAQC,IAAIH,GACLpB,EAAAC,EAAAC,cAACsB,EAAD,CACNzB,MAAOqB,EAAMrB,MACbD,OAAQ,mCAAqCsB,EAAMK,YACnDf,SAAUU,EAAMV,SAChBH,KAAMa,EAAMM,aACZC,IAAKN,SAMRO,gCAAa,SAAAC,IAAA,IAAAX,EAAA,OAAAY,EAAA7B,EAAA8B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACSjB,EAAKkB,WADd,OACNjB,EADMc,EAAAI,KAEZnB,EAAKoB,SAAS,CACbnB,WAHW,wBAAAc,EAAAM,SAAAT,EAAAU,4FA3CZA,KAAKX,gDAmDL,OAAOY,MAAM,uGACZC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,UAClBC,MAAM,SAAAC,GAAG,OAAIxB,QAAQC,IAAIuB,sCAIjB,IACF5B,EAAWqB,KAAKxB,MAAhBG,OACL,OACElB,EAAAC,EAAAC,cAAA,OAAKW,UAAWK,EAAS,MAAQ,eACpCA,EAASqB,KAAKvB,gBAAkB,kBAnEjB+B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.68149d02.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css';\r\n\r\nfunction Movie({ title, poster, rate, overview}) {\r\n\treturn (\r\n\t\t<div className=\"movie\">\r\n\t\t\t<h1>{title}</h1>\r\n\t\t\t<MoviePoster poster={poster} title={title}/>\r\n\t\t\t<MovieRate rate={rate} />\r\n\t\t\t<MovieDesc overview={overview} />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\nfunction MoviePoster({ poster, title}) {\r\n\t// console.log(this.props);\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<img src={poster} alt={title} title={title}/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nfunction MovieRate({ rate }) {\r\n\t// console.log(this.props);\r\n\treturn (\r\n\t\t<p>{rate}</p>\r\n\t)\r\n}\r\n\r\nfunction MovieDesc({ overview }) {\r\n\t// console.log(this.props);\r\n\treturn (\r\n\t\t<p>{overview}</p>\r\n\t)\r\n}\r\n\r\nMovie.propTypes = {\r\n\ttitle: PropTypes.string.isRequired,\r\n\tposter: PropTypes.string.isRequired,\r\n\trate: PropTypes.number.isRequired,\r\n\toverview: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n\tposter: PropTypes.string.isRequired,\r\n\ttitle: PropTypes.string.isRequired\r\n}\r\n\r\nMovieRate.propTypes = {\r\n\trate: PropTypes.number.isRequired\r\n}\r\n\r\nMovieDesc.propTypes = {\r\n\toverview: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n\n\tstate = {}\n\n\tcomponentDidMount(){\n\t\tthis._getMovies();\n\t}\n\n\t//상태값 변경 예시\n\t// componentDidMount(){\n\t// \tsetTimeout(() => {\n\t// \t\tthis.setState({\n\t// \t\t\tmovies: [\n\t// \t\t\t\t{\n\t// \t\t\t\t\ttitle: \"신과함께-죄와벌\",\n\t// \t\t\t\t\tposter: \"http://img.movist.com/?img=/x00/04/78/00_p1.jpg\"\n\t// \t\t\t\t},\n\t// \t\t\t\t{\n\t// \t\t\t\t\ttitle: \"범죄도시\",\n\t// \t\t\t\t\tposter: \"http://esaram.co.kr/sites/default/files/multimedia/%EB%B2%94%EC%A3%84%EB%8F%84%EC%8B%9C_%EB%A9%94%EC%9D%B8%ED%8F%AC%EC%8A%A4%ED%84%B0.jpg\"\n\t// \t\t\t\t},\n\t// \t\t\t\t{\n\t// \t\t\t\t\ttitle: \"국제시장\",\n\t// \t\t\t\t\tposter: \"http://www.ilyosisa.co.kr/news/photo/201412/75365_17975_1332.jpg\"\n\t// \t\t\t\t},\n\t// \t\t\t\t{\n\t// \t\t\t\t\ttitle: \"아이언맨\",\n\t// \t\t\t\t\tposter: \"https://mblogthumb-phinf.pstatic.net/20141117_71/kimmisung08_1416169858790yebiW_JPEG/Iron_Man_poster%2Cmovie_poster%2C%BE%C6%C0%CC%BE%F0%B8%C7_%C6%F7%BD%BA%C5%CD%2C%BF%B5%C8%AD_%C6%F7%BD%BA%C5%CD%2C%BE%C6%C0%CC%BE%F0%B8%C72_%C6%F7%BD%BA%C5%CDldjfop3jfdksjfls.jpg?type=w2\"\n\t// \t\t\t\t}\n\t// \t\t\t]\n\t// \t\t})\n\t// \t},3000)\n\t// }\n\n\t_renderMovies = () => {\n\t\tconst movies = this.state.movies.map((movie, index) => {\n\t\t\tconsole.log(movie)\n\t\t\treturn <Movie \n\t\t\t\ttitle={movie.title} \n\t\t\t\tposter={'https://image.tmdb.org/t/p/w500/' + movie.poster_path}\n\t\t\t\toverview={movie.overview} \n\t\t\t\trate={movie.vote_average}\n\t\t\t\tkey={index} \n\t\t\t/> //array할때는 key 값이 반드시 필요하다.\n\t\t})\n\t\treturn movies\n\t}\n\n\t_getMovies = async () => {\n\t\tconst movies = await this._callApi()\n\t\tthis.setState({\n\t\t\tmovies\n\t\t})\n\t}\n\n\t_callApi() {\n\t\treturn fetch(\"https://api.themoviedb.org/3/discover/movie?api_key=0f40db77d8d5f917e7414c3131c26da4&language=ko-KR\")\n\t\t.then(potato => potato.json())\n\t\t.then(json => json.results)\n\t\t.catch(err => console.log(err))\n\t\t// Promise(\"https://api.themoviedb.org/3/movie/550?api_key=0f40db77d8d5f917e7414c3131c26da4&language=ko-KR\")\n\t}\n\n  render() {\n\tconst { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App-loading\"}>\n\t\t{movies ? this._renderMovies() : \"Loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}